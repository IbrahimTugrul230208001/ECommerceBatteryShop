@model AdminStockViewModel
@{
    ViewData["Title"] = "Stok Yönetimi";
    Layout = "_AdminLayout";
}
<main class="mx-auto max-w-7xl px-6 py-10">
    <div class="grid gap-8 lg:grid-cols-[320px_minmax(0,1fr)]">
        <aside class="space-y-6">
            <div class="rounded-3xl border border-slate-200 bg-white p-6 shadow-lg shadow-slate-200/40">
                <h2 class="text-sm font-semibold uppercase tracking-wide text-slate-500">Hızlı Erişim</h2>
                <nav class="mt-4 space-y-2 text-sm font-medium text-slate-700">
                    <a class="flex items-center justify-between rounded-xl bg-slate-900 px-4 py-3 text-white shadow-lg shadow-slate-900/20" href="#kaydet">
                        <span>Yeni Ürün Girişi</span>
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="h-4 w-4">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5 12h14M12 5l7 7-7 7" />
                        </svg>
                    </a>
                    <p class="rounded-xl px-4 py-3 text-slate-500">
                        Ürün görselleri, stok adetleri ve SEO ayarları giriş sırasında yönetilebilir.
                    </p>
                </nav>
            </div>
            <div class="rounded-3xl border border-amber-200 bg-amber-50 p-6 shadow-inner">
                <h3 class="text-sm font-semibold uppercase tracking-wide text-amber-700">İpucu</h3>
                <p class="mt-3 text-sm leading-6 text-amber-900">
                    Ürün görseli yüksek çözünürlüklü olmalı (en az 1200px) ve sade bir arka plan içermelidir. Fiyatı girerken vergiler dahil değeri tercih edin.
                </p>
            </div>
        </aside>
<section class="space-y-6">
            <header class="rounded-3xl border border-slate-200 bg-white/90 px-8 py-6 shadow-xl shadow-slate-200/60">
                <div class="flex flex-wrap items-center justify-between gap-4">
                    <div>
                        <h1 class="text-2xl font-semibold text-slate-900">Stok Yönetimi</h1>
                        <p class="mt-1 text-sm text-slate-500">Ürünlerin stok durumlarını kontrol edin ve anlık olarak güncelleyin.</p>
                    </div>
                    <div class="flex items-center gap-2 rounded-full bg-slate-900/90 px-4 py-2 text-sm font-semibold text-white shadow-lg shadow-slate-900/25">
                        <span class="h-2 w-2 rounded-full bg-emerald-400"></span> Aktif
                    </div>
                </div>

                <p class="mt-3 text-xs text-slate-500">
                    Listeden ürünleri seçerek stokta olup olmadığını belirleyebilir, kaydederek mağaza görünürlüğünü güncel tutabilirsiniz.
                </p>

                <div class="mt-4">
                    <div class="relative">
                        <svg class="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500 pointer-events-none"
                             xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <circle cx="11" cy="11" r="7" stroke-width="2" />
                            <path d="M21 21l-4.3-4.3" stroke-width="2" />
                        </svg>
                        <input id="stock-search" type="search"
                               value="@Model.SearchTerm"
                               placeholder="Ürün ara…"
                               class="w-full rounded-2xl border border-slate-300 pl-10 pr-10 py-3
                  text-sm text-slate-800 placeholder-slate-400
                  focus:border-slate-400 focus:outline-none focus:ring-2 focus:ring-slate-200" />
                        <button id="stock-clear"
                                class="absolute right-3 top-1/2 -translate-y-1/2 hidden text-xs text-slate-500">
                            Temizle
                        </button>
                    </div>
                </div>

            </header>
    @if (TempData["StockUpdateSuccess"] is string successMessage)
    {
        <div class="rounded-2xl border border-emerald-200 bg-emerald-50 px-6 py-4 text-sm text-emerald-900 shadow-sm">
            <div class="flex items-start gap-3">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="mt-0.5 h-5 w-5 text-emerald-500">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5 13l4 4L19 7" />
                </svg>
                <p>@successMessage</p>
            </div>
        </div>
    }

    <form asp-action="Stocks" method="post" class="space-y-5" data-stock-form>
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="space-y-1 text-sm text-red-600" role="alert"></div>

        <input type="hidden" asp-for="SearchTerm" id="stock-search-term" />

        <div class="overflow-hidden rounded-3xl border border-slate-200 bg-white shadow-lg shadow-slate-200/50">
            <table class="min-w-full divide-y divide-slate-200">
                <thead class="bg-slate-50/80">
                    <tr class="text-left text-xs font-semibold uppercase tracking-wide text-slate-500">
                        <th scope="col" class="px-6 py-4">Ürün</th>
                        <th scope="col" class="px-6 py-4">Adet</th>
                    </tr>
                </thead>
               <tbody id="stock-rows" class="divide-y divide-slate-100 text-sm text-slate-700">
                    @if (Model.Items.Count == 0)
                    {
                        <tr data-empty-row>
                            <td colspan="2" class="px-6 py-8 text-center text-sm text-slate-500">
                                Arama yaparak ürünleri görüntüleyin.
                            </td>
                        </tr>
                    }
                    else
                    {
                        for (var i = 0; i < Model.Items.Count; i++)
                        {
                            <tr class="transition hover:bg-slate-50/70" data-stock-row>
                                <td class="px-6 py-4">
                                    <div class="flex flex-col">
                                        <span class="font-semibold text-slate-900">@Model.Items[i].ProductName</span>
                                        <span class="text-xs text-slate-500">ID: @Model.Items[i].ProductId</span>
                                    </div>
                                    <input type="hidden" asp-for="Items[i].ProductId" />
                                    <input type="hidden" asp-for="Items[i].ProductName" />
                                </td>
                                <td class="px-6 py-4">
                                    <label class="inline-flex items-center gap-3 rounded-full border border-slate-200 bg-white px-4 py-2 text-sm font-medium text-slate-700 shadow-sm">
                                          <input asp-for="Items[i].Quantity" type="number" min="0" step="1" class="w-24 rounded-xl border border-slate-200 px-3 py-2 text-sm text-slate-700 focus:border-slate-400 focus:outline-none focus:ring-2 focus:ring-slate-200" />
                                    </label>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="flex items-center justify-end">
            <button id="kaydet" type="submit" class="inline-flex items-center gap-3 rounded-full bg-slate-900 px-6 py-3 text-sm font-semibold text-white shadow-xl shadow-slate-900/25 transition hover:bg-slate-700 disabled:opacity-50 disabled:cursor-not-allowed" disabled="@(Model.Items.Count == 0 ? "disabled" : null)">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="h-5 w-5">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5 12l5 5L20 7" />
                </svg>
                Stok Adetlerini Kaydet
            </button>
        </div>
    </form>
</section>
</div>
</main>


@section Scripts {
    <script>
        (function () {
            const searchInput = document.getElementById('stock-search');
            const clearButton = document.getElementById('stock-clear');
            const tableBody = document.getElementById('stock-rows');
            const hiddenSearch = document.getElementById('stock-search-term');
            const form = document.querySelector('form[data-stock-form]');
            const searchUrl = '@Url.Action("StockSearch", "Admin")';
            const minQueryLength = 2;
            const saveButton = document.getElementById('kaydet');

            let currentRequest = null;
            let debounceTimer = null;

            function updateSaveState() {
                if (!saveButton) return;
                const hasRows = !!tableBody.querySelector('tr[data-stock-row]');
                saveButton.disabled = !hasRows;
            }

            function escapeHtml(value) {
                return String(value)
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            }

            function setTableContent(markup) {
                tableBody.innerHTML = markup;
                updateSaveState();
            }

            function renderPlaceholder(message) {
                setTableContent(`
                    <tr data-empty-row>
                        <td colspan="2" class="px-6 py-8 text-center text-sm text-slate-500">
                            ${message}
                        </td>
                    </tr>
                `);
            }

            function renderLoading() {
                renderPlaceholder('Ürünler yükleniyor…');
            }

            function renderError() {
                renderPlaceholder('Ürünler yüklenirken bir sorun oluştu. Lütfen tekrar deneyin.');
            }

            function renderResults(items) {
                if (!Array.isArray(items) || items.length === 0) {
                    renderPlaceholder('Aramanıza uygun ürün bulunamadı.');
                    return;
                }

                const rows = items.map((item, index) => {
                    const quantityRaw = item.quantity ?? item.Quantity ?? 0;
                    const productIdRaw = item.productId ?? item.ProductId;
                    const productNameRaw = item.productName ?? item.ProductName ?? '';

                    const quantity = Number.isFinite(quantityRaw) ? quantityRaw : parseInt(quantityRaw, 10) || 0;
                    const productId = Number.isFinite(productIdRaw) ? productIdRaw : parseInt(productIdRaw, 10);
                    const productIdValue = Number.isFinite(productId) ? productId : (productIdRaw ?? '');
                    const productNameSafe = escapeHtml(productNameRaw);

                    return `
                        <tr class="transition hover:bg-slate-50/70" data-stock-row>
                            <td class="px-6 py-4">
                                <div class="flex flex-col">
                                    <span class="font-semibold text-slate-900">${productNameSafe}</span>
                                    <span class="text-xs text-slate-500">ID: ${Number.isFinite(productId) ? productId : escapeHtml(productIdValue)}</span>
                                </div>
                                <input type="hidden" name="Items[${index}].ProductId" value="${escapeHtml(productIdValue)}" />
                                <input type="hidden" name="Items[${index}].ProductName" value="${productNameSafe}" />
                            </td>
                            <td class="px-6 py-4">
                                <label class="inline-flex items-center gap-3 rounded-full border border-slate-200 bg-white px-4 py-2 text-sm font-medium text-slate-700 shadow-sm">
                                    <input type="number" name="Items[${index}].Quantity" min="0" step="1" value="${escapeHtml(quantity)}" class="w-24 rounded-xl border border-slate-200 px-3 py-2 text-sm text-slate-700 focus:border-slate-400 focus:outline-none focus:ring-2 focus:ring-slate-200" />
                                </label>
                            </td>
                        </tr>
                    `;
                });

                setTableContent(rows.join(''));
            }

            function abortCurrentRequest() {
                if (currentRequest) {
                    currentRequest.abort();
                    currentRequest = null;
                }
            }

            async function fetchResults(term) {
                abortCurrentRequest();

                const controller = new AbortController();
                currentRequest = controller;

                try {
                    const response = await fetch(`${searchUrl}?query=${encodeURIComponent(term)}`, {
                        signal: controller.signal,
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Response not OK');
                    }

                    const data = await response.json();
                    renderResults(data.items ?? []);
                } catch (error) {
                    if (controller.signal.aborted) {
                        return;
                    }

                    console.error('Stock search failed', error);
                    renderError();
                } finally {
                    if (currentRequest === controller) {
                        currentRequest = null;
                    }
                }
            }

            function scheduleFetch(term) {
                if (debounceTimer) {
                    clearTimeout(debounceTimer);
                }

                debounceTimer = setTimeout(() => fetchResults(term), 200);
            }

            function onSearchInput() {
                const term = searchInput.value.trim();
                hiddenSearch.value = term;
                if (clearButton) {
                    clearButton.classList.toggle('hidden', term.length === 0);
                }

                abortCurrentRequest();

                if (term.length === 0) {
                    renderPlaceholder('Arama yaparak ürünleri görüntüleyin.');
                    return;
                }

                if (term.length < minQueryLength && !/^\d+$/.test(term)) {
                    renderPlaceholder('Lütfen en az iki karakter girin.');
                    return;
                }

                renderLoading();
                scheduleFetch(term);
            }

            function onClearClick(event) {
                event.preventDefault();
                searchInput.value = '';
                hiddenSearch.value = '';
                if (clearButton) {
                    clearButton.classList.add('hidden');
                }
                abortCurrentRequest();
                renderPlaceholder('Arama yaparak ürünleri görüntüleyin.');
                searchInput.focus();
            }

            if (form) {
                form.addEventListener('submit', function () {
                    // ensure indexes remain consistent by renumbering inputs
                    const rows = tableBody.querySelectorAll('tr[data-stock-row]');
                    rows.forEach((row, index) => {
                        const hiddenInputs = row.querySelectorAll('input[type="hidden"]');
                        hiddenInputs.forEach((input) => {
                            const field = input.name.split('.').pop();
                            input.name = `Items[${index}].${field}`;
                        });

                        const qtyInput = row.querySelector('input[type="number"]');
                        if (qtyInput) {
                            qtyInput.name = `Items[${index}].Quantity`;
                        }
                    });
                });
            }

            if (searchInput) {
                searchInput.addEventListener('input', onSearchInput);
                searchInput.addEventListener('search', onSearchInput);
            }

            if (clearButton) {
                clearButton.addEventListener('click', onClearClick);
            }

            // Initialise state on load
            const initialTerm = searchInput ? searchInput.value.trim() : '';
            hiddenSearch.value = initialTerm;
            if (clearButton) {
                clearButton.classList.toggle('hidden', initialTerm.length === 0);
            }

            const hasServerRows = tableBody.querySelector('tr[data-stock-row]');
            updateSaveState();
            if (initialTerm.length === 0 && !hasServerRows) {
                renderPlaceholder('Arama yaparak ürünleri görüntüleyin.');
            } else if (initialTerm.length >= minQueryLength && !hasServerRows) {
                renderLoading();
                fetchResults(initialTerm);
            }
        })();
    </script>
}

