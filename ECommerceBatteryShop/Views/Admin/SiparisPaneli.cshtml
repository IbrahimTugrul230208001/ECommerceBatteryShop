@using System.Globalization
@model OrderViewModel
@{
    ViewData["Title"] = "Sipariş Yönetimi";
    Layout = "_AdminLayout";

    var culture = new CultureInfo("tr-TR");
    var workflowStatusOptions = new[]
   {
        "Ödeme alındı",
        "Hazırlanıyor",
        "Kargoya verildi",
        "Teslim edildi",
        "İade sürecinde",
        "İade tamamlandı"
    };
 }

<div class="mx-auto max-w-7xl space-y-10">
    <a href="c:\users\lenovo\source\repos\ecommercebatteryshop\ecommercebatteryshop\views\admin\siparispaneli.cshtml">c:\users\lenovo\source\repos\ecommercebatteryshop\ecommercebatteryshop\views\admin\siparispaneli.cshtml</a>
    <header class="flex flex-col gap-6 lg:flex-row lg:items-center lg:justify-between">
        <div class="space-y-2">
            <p class="text-xs font-semibold uppercase tracking-wide text-slate-500">Sipariş Yönetim Paneli</p>
            <h1 class="text-3xl font-semibold text-slate-900">Sipariş Akışı ve Durum Güncellemeleri</h1>
            <p class="max-w-3xl text-sm leading-6 text-slate-500">
                Bu sayfa, OrdersRepository üzerinden gelen sipariş akışını gerçek zamanlı takip etmek için tasarlandı.
                Aşağıdaki dummy veriler; yeni siparişlerin izlenmesi, durum değişiklikleri ve kargo süreçlerinin yönetimi
                için kullanılacak bileşenleri göstermektedir.
            </p>
        </div>
    </header>

        <article class="space-y-6 rounded-3xl border border-slate-200 bg-white p-6 shadow-lg shadow-slate-200/40">
        <div class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
            <div>
                <h2 class="text-lg font-semibold text-slate-900">Sipariş Akışı</h2>
                <p class="text-sm text-slate-500">OrdersRepository üzerinden alınan veriler burada listelenecek. Satırlar üzerinden durum güncelleyebilirsiniz.</p>
            </div>
            <div class="flex items-center gap-2">
                <label class="text-xs font-semibold uppercase tracking-wide text-slate-500">Durum Filtrele</label>
                <select class="rounded-full border border-slate-200 px-4 py-2 text-sm text-slate-700 focus:border-slate-400 focus:outline-none focus:ring-2 focus:ring-slate-200">
                    <option value="">Tümü</option>
                    @foreach (var option in workflowStatusOptions)
                    {
                        <option value="@option">@option</option>
                    }
                </select>
            </div>
        </div>

            <div class="overflow-hidden rounded-2xl border border-slate-100">
                <table class="min-w-full divide-y divide-slate-100 text-sm">
                    <thead class="bg-slate-50/80 text-left text-xs font-semibold uppercase tracking-wide text-slate-500">
                        <tr>
                            <th class="px-4 py-3">Sipariş</th>
                            <th class="px-4 py-3">Müşteri</th>
                            <th class="px-4 py-3">Tutar</th>
                            <th class="px-4 py-3">Ödeme</th>
                            <th class="px-4 py-3">Durum</th>
                            <th class="px-4 py-3">Son İşlem</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-slate-100 bg-white">
                        @foreach (var order in Model.Orders)
                        {
                            var method = order.Payments
                                .OrderByDescending(p => p.TransactionDate)
                                .Select(p => p.PaymentMethod)
                                .FirstOrDefault();
                            var isGuest = order.User == null;
                            //var displayName = isGuest ? (string.IsNullOrWhiteSpace(order.BuyerName) ? "Misafir" : order.BuyerName) : (order.User?.UserName ?? "");
                          //  var displayEmail = isGuest ? (order.BuyerEmail ?? "-") : (order.User?.Email ?? "-");
                            <tr>
                                <td class="px-4 py-4 align-top font-semibold text-slate-900">
                                    <div class="space-y-1">
                                        <p>@order.OrderId</p>
                                        <p class="text-xs font-medium text-slate-500">@order.OrderDate.ToString("dd MMM yyyy HH:mm", culture)</p>
                                    </div>
                                </td>
                                <td class="px-4 py-4 align-top">
                                    <div class="space-y-1 text-sm">
                                        <div class="flex items-center gap-2">
                                            <p class="font-semibold text-slate-900">@order.User.UserName</p>
                                            @if (isGuest)
                                            {
                                                <span class="rounded-full bg-amber-100 px-2 py-0.5 text-[10px] font-semibold text-amber-700">Misafir</span>
                                            }
                                        </div>
                                        <p class="text-xs text-slate-500">@order.User.UserName</p>
                                    </div>
                                </td>
                                <td class="px-4 py-4 align-top font-semibold text-slate-900">@order.TotalAmount.ToString("C", culture)</td>
                                <td class="px-4 py-4 align-top text-sm font-medium text-slate-700">@(string.IsNullOrWhiteSpace(method) ? "-" : method)</td>
                                <td class="px-4 py-4 align-top" data-order-status="@order.OrderId">
                                    <span class="inline-flex items-center gap-1 rounded-full bg-slate-100 px-3 py-1 text-xs font-semibold text-slate-600">
                                        <span class="h-2 w-2 rounded-full bg-emerald-400"></span>
                                        @order.Status
                                    </span>
                                </td>
                                <td class="px-4 py-4 align-top">
                                    <div class="flex items-center">
                                    <button class="apply-status bg-gray-900 inline-flex items-center gap-2 rounded-full px-4 py-2 text-xs font-semibold text-slate-100 transition hover:opacity-70 trasition duration-100"
                                            type="button"
                                            data-order="@order.OrderId">
                                        Durumu Güncelle
                                    </button>
                                    </div>
                                </td>
                            </tr>
                            <tr class="bg-slate-50/50">
                                <td colspan="7" class="px-4 pb-6">
                                    <div class="grid gap-4 rounded-2xl border border-slate-100 bg-white/70 p-4 md:grid-cols-[minmax(0,1fr)_240px]">
                                        <div class="space-y-2">
                                            <p class="text-xs font-semibold uppercase tracking-wide text-slate-500">Teslimat Bilgileri</p>
                                            @if (order.Address is not null)
                                            {
                                                <p class="text-sm text-slate-700">@order.Address.FullAddress</p>
                                                <p class="text-xs text-slate-500">@order.Address.Neighbourhood, @order.Address.State / @order.Address.City</p>
                                            }
                                            @*
                                            else
                                            {
                                                <p class="text-sm text-slate-700">@order.ShippingAddressText</p>
                                                <p class="text-xs text-slate-500">@order.ShippingNeighbourhood, @order.ShippingState / @order.ShippingCity</p>
                                            }*@
                                               
                                            <div class="h-px bg-slate-100 my-2"></div>
                                            <p class="text-xs font-semibold uppercase tracking-wide text-slate-500">Ürünler</p>
                                            <ul class="space-y-2 text-sm text-slate-600">
                                                @foreach (var item in order.Items)
                                                {
                                                    <li class="flex items-center justify-between rounded-xl bg-slate-50 px-3 py-2">
                                                        <span class="font-medium text-slate-700">@item.Product.Name</span>
                                                        <span class="text-xs text-slate-500">@item.Quantity adet</span>
                                                    <span class="font-semibold text-slate-900">@(decimal.Round((item.UnitPrice * 1.2m * Model.Rate),2).ToString("C", culture))</span>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    <div class="space-y-3 rounded-2xl bg-slate-900/90 p-4 text-xs text-white"
                                         data-order="@order.OrderId">
                                        <p class="text-[11px] font-semibold uppercase tracking-wide text-slate-300">Hızlı Aksiyonlar</p>

                                        @foreach (var option in workflowStatusOptions)
                                        {
                                            var isCurrent = option == order.Status;
                                            <button type="button" id="currentOption"
                                                    class="status-option w-full rounded-xl px-3 py-2 text-left font-semibold transition
                                   @(isCurrent ? "ring-2 ring-emerald-400 bg-white/20 text-white"
                                                                                                                                       : "bg-white/10 text-white hover:bg-white/20")"
                                            data-status="@option">
                                        @option
                                    </button>
                                                                        }
                                    </div>

                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </article>  
</div>
<script>
    (function () {
      // orderNo -> seçili (bekleyen) durum
      const pending = new Map();

      // 1) Durum seçimi: aynı sipariş için tek seçim, tıklayınca toggle
      document.addEventListener('click', (e) => {
        const btn = e.target.closest('.status-option');
        if (!btn) return;

        const container = btn.closest('[data-order]');
        const orderNo = container?.dataset.order;
        if (!orderNo) return;

        // aynı paneldeki tüm butonlardan seçimi temizle
        container.querySelectorAll('.status-option').forEach(b => {
          b.classList.remove('ring-2', 'ring-emerald-400', 'bg-white/20');
          b.classList.add('bg-white/10');
        });

        // toggle: eğer zaten seçili ise temizle; değilse seç
        const chosen = btn.dataset.status;
        const current = pending.get(orderNo);

        if (current === chosen) {
          // seçimi kaldır
          pending.delete(orderNo);
        } else {
          // yeni seçimi ata ve highlight et
          pending.set(orderNo, chosen);
          btn.classList.add('ring-2', 'ring-emerald-400', 'bg-white/20');
          btn.classList.remove('bg-white/10');
        }
      });

      // 2) "Durumu Güncelle" tıklanınca sadece seçili olanı uygula
      document.addEventListener('click', async (e) => {
        const applyBtn = e.target.closest('.apply-status');
        if (!applyBtn) return;

        const orderId = applyBtn.dataset.order;
        if (!orderId) return;

        const nextStatus = pending.get(orderId);
        if (!nextStatus) {
          // Seçim yapılmadıysa hiç bir şey yapma (isterseniz ufak bir uyarı gösterebilirsiniz)
          applyBtn.classList.add('animate-pulse');
          setTimeout(() => applyBtn.classList.remove('animate-pulse'), 600);
          return;
        }

      const form = new URLSearchParams();
    form.append('orderId', orderId);
    form.append('newStatus', nextStatus);


    const res = await fetch('/Admin/UpdateStatus', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: form.toString()
    });


        // Seçimi temizle
        pending.delete(orderNo);

        // Görsel geri bildirim
        applyBtn.textContent = 'Güncellendi';
        applyBtn.classList.remove('border-slate-200', 'text-slate-600');
        applyBtn.classList.add('border-emerald-300', 'text-emerald-700');
        setTimeout(() => {
          applyBtn.textContent = 'Durumu Güncelle';
          applyBtn.classList.add('border-slate-200', 'text-slate-600');
          applyBtn.classList.remove('border-emerald-300', 'text-emerald-700');
        }, 1200);
      });
    })();
</script>
